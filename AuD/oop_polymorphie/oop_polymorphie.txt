OOP and inheritance

consider the following classes:

abstract class Animal {
	public abstract void move(String s);
	public void move(int x){
		System.out.println("teleport to "+x);
	}	
}
class Fish extends Animal {
	public void move(String dest){
		System.out.println("swim "+dest);
	}	
}
class Bird extends Animal {
	public void move(String dest){
		System.out.println("fly "+dest);
	}	
	public void move(int x, int y){
		System.out.println("fly "+x+y);
	}
}
class RoadRunner extends Bird {
	public void move(String dest){
		System.out.println("run "+dest);
	}	
	public void move(int x){
		System.out.println("run faster to "+x);
	}
}

What is the output of the following Java code (lines 5,7,8, and 9)?

    Fish shark = new Fish();
    Bird bird = new RoadRunner();
    Animal animal = new Bird();
    animal.move("home");
    animal=bird;
    shark.move(0);
    bird.move(0);
    animal.move("away");


Using this example, explain briefly the difference between overloading and overwriting. Think about the terms "class" and "signature"

Which of the following lines cannot be compiled? Why not?

    Animal shark = new Fish();
    Animal gnu = new Animal();
    RoadRunner coyote = new RoadRunner();
    Fish nemo = coyote;
